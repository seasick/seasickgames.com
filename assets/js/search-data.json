{
  
    
        "post0": {
            "title": "Zynga laid off over 500 employees, some insight @ reddit",
            "content": "A former employee of Zynga answers questions on reddit. . Some of the questions . What percent of users actually pay real money in Zynga games? | What (if anything) do you think they did right as a company? | How much longer will Zynga be around for? | What are the benefits of working at Zynga? | I heard Zynga is expanding into the gambling sector. Surely there’s huge money there. Do you know anything about that? | And much much more, its like a never ending thread | . So if you want to know more about Zynga, I suggest you have a look into it :) .",
            "url": "https://seasick.github.io/seasickgames.com/2013/06/07/Zynga-laid-off-over-500-employees.html",
            "relUrl": "/2013/06/07/Zynga-laid-off-over-500-employees.html",
            "date": " • Jun 7, 2013"
        }
        
    
  
    
        ,"post1": {
            "title": "Unity and simple waypoints",
            "content": "Unity again! Yesterday I tried to make my player gameObject to follow specific waypoints. I have published the code at GitHub. Get it and Do What The Fuck You Want with it. I always wanted to release code under this license. Finally ^^ . Code explained . It isn’t much code, so it is easily explained. The UnityScript file contains two classes. First we will have a look at the Waypointer. . The Waypointer class has two public attributes . speed … The speed with which you gameObject will move | scale … The scale of the waypoint hitbox. It is needed to tell if your gameObject reached a waypoint | . As you can see, the class also has a private attribute - *queue. *It will contain a Queue object. This object is basically a “First In First Out” list. We can add waypoints on top of the stack, and remove them from the beginning if your gameObject reaches a waypoint. Since this Queue object isn’t imported in Unity by default, we need to do this our self. . In the Update function we are doing only one thing: Get to the first waypoint in the queue. Ok, it is a little bit more. We have to check if there is a waypoint, and we need to look into the direction of the waypoint. Here you have the chance to improve the performance of the script. It isn’t necessary to set the rotation of your gameObject everytime - we could set it once we remove a waypoint (given that there is another waypoint in the queue). . There is also a function for adding new waypoints. As you can see, this function isn’t called anywhere. You have to call this function when you want to add a new waypoint. That way you could use this UnityScript not only for your player gameObject - you could use it on any gameObject you like. Think about several selected soldiers … Of course your collision detection between them has to be way smarter - atm there is none ^^ . I called this method from another component. With this component I can click anywhere onto the screen, and a new waypoint is added. Have some code … . #pragma strict function Update { // Check if a new Waypoint should be added if(Input.GetKeyDown(KeyCode.Mouse0)) { var playerPlane = new Plane(Vector3.up, transform.position); var ray = Camera.main.ScreenPointToRay (Input.mousePosition); var hitdist = 0.0; if (playerPlane.Raycast (ray, hitdist)) { var targetPoint = ray.GetPoint(hitdist); gameObject.GetComponent(Waypointer).AddWaypoint(ray.GetPoint(hitdist)); } } } . This AddWaypoint function will create a new gameObject with a BoxCollider. The public attribute scale will be assigned to the scale of the colliders transform. Also we will set the position and mark the collider as trigger. This way your gameObject won’t bounce of it. After that we just enqueue the collider. . One important thing: We are also attaching the second class of this script to the collider. The Waypoint class. This class only has a OnTriggerEnter function which will check if the colliding object (normally your gameObject) has a Waypointer component on it. If so, it will use this component to tell it, that your gameObject has hit a waypoint. . And we are back in the Waypointer class. When your gameObject hit a waypoint, we just check if it is the first element in our queue. If so, we will remove it from the queue. Your gameObject will move on to the next waypoint. . Downsides . At the moment there are a few downsides to this approach: . It is possible that this isn’t working on your iPhone. I didn’t bothered confirmed it yet, but Unity on the iPhone is only supported to a specific .NET compatibility level. Anyway - this has been a great opportunity to get into the .NET classes. | It will only work on plane terrain - or at least it will look odd on bumpy terrain. | . Improvements? . There is enough space for improvements. . You could add a default prefab which will be used instead of the default collider. This way you could place something visible (and good looking) onto your screen. | As mentioned before - you could tweak the performance a little bit. | Add the ability to remove waypoints. Have a look at the Queue or implement your own FIFO list in pure UnityScript. | . Unity and Mono/.NET compatibility level . Unity uses mono for all its magic. You can even import some .NET classes and use them in your scripts. It doesn’t matter if you are using UnityScript, Boo or C#. . I haven’t got into this topic very far, but you can set the API Compatibility Level in your projects settings (in Unity 3.5 you will find it in Player Settings &gt; Other Settings). For me there are currently two entries . .NET 2.0 | .NET 2.0 Subset | . You can see on this page which features are supported in which level. .",
            "url": "https://seasick.github.io/seasickgames.com/unity/2012/10/16/Unity-and-simple-waypoints.html",
            "relUrl": "/unity/2012/10/16/Unity-and-simple-waypoints.html",
            "date": " • Oct 16, 2012"
        }
        
    
  
    
        ,"post2": {
            "title": "Unity - First steps",
            "content": "So I wrote yesterday evening about unity. After I published the post, I started to make a little Jump’n’Run. I think it is a good way to get to know unity, because it covers a wide range of needed features: . Camera movement and controll | Controlling “the player” | Collision detection (unity does all the heavy lifting for you) | Triggering death and finishing a level Loading new levels on success | Reloading the level on death | . | Collection points while running through the levels | Animation (I animated the “coins” to bounce up and down) | . What did I learn from this? . When you want to do an animation on a prefab (“template” for assets) you need to create the animation on it, but you can only changes the values on an existing GameObject. Furthermore I noticed, that I needed the prefab to be contained into a parent. Otherwise the animation will work with absolute values, and all your GameObjects which inherit from this prefab, will be in one place (at least if you have a positioning animation). With a parent, the positioning will work relative to the parent. Took me a while to figure this out . | The community is great, and seems to be very noobie friendly (as long as you care to search first)! Every question I got was asked before, no need to ask for myself :) | Controlling the character takes a lot of time to tweak. And as you can see, I didn’t managed to do it the right way. The controls are still a little bit blury. | There isn’t realy much coding. | . Today I tryied out the building options - As you can see I attached here a build of the web player. Control your “character” with WAD (yeah, there is no S :) ), jump with space. It is a bit small, but it demonstrates how quickly you get something to show with unity. . There is surly enough space to polish this up, but it wasn’t ment to be a finished game. Just something to learn from. . Next up … maybe I’ll try a breakout clone. I’m sure there is something to learn from :) .",
            "url": "https://seasick.github.io/seasickgames.com/unity/2012/09/30/Unity-first-steps.html",
            "relUrl": "/unity/2012/09/30/Unity-first-steps.html",
            "date": " • Sep 30, 2012"
        }
        
    
  
    
        ,"post3": {
            "title": "Unity 3D ... My next challenge",
            "content": "Again … no posting for a longer period. Yes, I’am kinda lazy :) Dispite my lazyness I manage from time to time to get my focus on some things. This time it is Unity 3D. You may be familiar with it - it is “just another” game engine. . But this one is special. Not only there is a free license for it, you can build your games for Windows, Mac, Linux (with version 4) and the web. If you are willing to pay, you can even build for Android, iOS, PS3, Xbox 360, Nintendo Wii and Flash. Pretty awesome right? But wait there is more! There are no anual fees or royalties per title! . Unity will make all the heavy lifting for you . Rendering | Lightning | Terrain | Physics | Audio | Networking | . The editor itself is very user friendly. Not sure yet, but for coders maybe a bit too friendly :) I’m used to use my Keyboard a lot - with Unity I need my mouse more often than usual. . A killer feature is the ability to start the current scene you are working on directly from the editor. You can even tweak some attributes and make changes while playing. . Unity also comes with a asset store, where you can purchase things like models, materials, audio, scripts, particle systems, editor extensions or even complete projects. . I’m looking forward to create somthing I can publish again :) .",
            "url": "https://seasick.github.io/seasickgames.com/unity/2012/09/29/Unity-3D-My-next-challenge.html",
            "relUrl": "/unity/2012/09/29/Unity-3D-My-next-challenge.html",
            "date": " • Sep 29, 2012"
        }
        
    
  
    
        ,"post4": {
            "title": "RaspberryPi Keyboard!",
            "content": "As a proud owner of a RaspberryPi I definitely need a keyboard for it, if I’m carrying it with me. . So what are the options? . A silicon flexible keyboard, which I could roll together, and would fit anywhere | A very small keyboard | A smartphone app, which will be my keyboard (via USB, Bluetooth or WLAN) | Or integrate the RaspberryPi into a normal Cherry keyboard (pictures inside!) | . I didn’t want a normal sized keyboard, but that … that is just awesome :) . To sum it up for you: . He used a Cherry G80-3000. It’s very robust (“you could put a nail with it into the wall”) and nearly empty. | HDMI seems to be not a good idea to extend. So he choose to put the HDMI connector at the rear end of the keyboard. | To into the keyboard, the USB and cinch connector had to be detached. | With all the other connectors inside, they need to be extended. | Holes were first drilled and cut in shape afterwards. | The hollow space behind the connectors (USB, LAN, Audio [still missing]) was filled up with Epoxy. | The keyboard is connected internally. | Thus leaving the keyboards original USB connector as the power source (remember, at least 700mA at 5V). | .",
            "url": "https://seasick.github.io/seasickgames.com/linux/modding/2012/08/22/RaspberryPi-Keyboard.html",
            "relUrl": "/linux/modding/2012/08/22/RaspberryPi-Keyboard.html",
            "date": " • Aug 22, 2012"
        }
        
    
  
    
        ,"post5": {
            "title": "European GDC 2012 - Day 3",
            "content": "Today it seemed to me, that most of the people weren’t attending, or they have chosen to visit the first day of the GamesCom. At least, it isn’t so crowded on the first day, because only press and the GDC attendees were allowed to visit. So I decided to do the same. I visited two talks in the morning, and started exploring the GamesCom in the afternoon. But first things first … . Postmortem: Sine Mora … . … the struggle to reboot a genre. Sine Mora is a shoot’em up game. The developers/producers wanted to revolutionize the genre of bullet hell shoot em ups. You know – those crazy hardcore games, were thousands of bullets fly around, and you die two seconds after you started to play. . A difficulty was that two studios collaborated on this game. “Digital Reality” (Hungary) and “Grasshopper” (Japan). Despite the cultural clash, they had to manage the distance and the different timezones. A key to manage this, was that the studios focused on their strength, and tried to distribute the work in a way, that they could work mostly independent of each other. . They wanted to mainstream their game, but they failed. The game itself got very good critics (afaik 82/100 metascore in 61 reviews) but till know only 20k units were sold (soon they will be released for other platforms – so they will get back their investment). For hardcore gamers, the game was to casual. For casual players, the game was too hardcore. . Two of the things they learned: . Never turn on family (Hardcore gamers) | Multi platform is necessary | . Machinations: A new way to design game mechanics . Just. Fucking. Awesome. This was the most mind blowing talk I attended. It was about a tool (free :) ) with which you can prototype your game mechanics. “Normally” you would have the following tools to plan your game. . Paper Easy, fast, cheap | Hard to test | . | Spreadsheet Easy, fast, cheap | Little bit awkward for designers | Hard to test | . | Software prototyping Not cheap, not fast, not easy | Easy to test :) | . | . This talk was mostly a demonstration of their free software. I even bought access at the airport to download it, to try it out myself (the only day, when I had my laptop not with me ^^). But at the moment (sitting in a Asian restaurant) I’m writing this blog page … argl – can’t wait :P . Anyway … It’s kinda hard to explain, what this tool does. Taken from the websites: . Machinations is a theoretical framework and an interactive, dynamic, graphical representation that describes games as dynamic systems and focuses on closed feedback loops within them. The intention is to find a way to express and investigate (recurrent) game structures methodologically. Machinations offers a new lens on the intuitive and delicate practice of game design and balancing. . At the heart of the frame work is a graphical notation designed to capture the dynamics of games. This notation is used in an online application that allows you to create interactive, dynamic diagrams of games. Below you can find links pages explaining the concepts behind the notation and application. . Games fucking com! . So much people. I’m glad I had the chance to visit on day zero – can’t imagine, what is going on tomorrow. I had to rush through the halls, but I managed to get my hands on the new World of Warcraft (after I setted up my talent tree, I had to leave, because you are only allowed to play 15 minutes … lol) and played Crysis 3, which will be coming in 2013. Kinda awesome, but the sound didn’t work. .",
            "url": "https://seasick.github.io/seasickgames.com/games/2012/08/16/European-GDC-2012-Day-3.html",
            "relUrl": "/games/2012/08/16/European-GDC-2012-Day-3.html",
            "date": " • Aug 16, 2012"
        }
        
    
  
    
        ,"post6": {
            "title": "European GDC 2012 - Day 2",
            "content": "AAA goes F2P: Same skills, different mindset . The guy who held the talk, is a former journalism student, who didn’t get a job as journalist and ended up in the AAA industry, participating on various titles like “Total War”. . Free 2 play is all about game mechanics. You need to earn the users will to pay for it. Only nice and shiny graphics wonts sell. . There is a “3 Minute Hook”, in which you need to be able to get the player into your game. Kinda remembered me of the low attention span from a talk yesterday (5 reasons …) - but in this case it was somewhat different. When a player buys a retail game in a store, he is paying 30-60€ for it. Don’t playing it would be like flushing money down the toilet. So players are willing to give the game a try. In a F2P game, you won’t have this generosity. You need to get the player hooked as soon as possible – otherwise you will lose him. He talked about that 70% of registered players will stop playing at the 4th day. . One of the hardest parts in F2P is the fact, that you have to deal with different players, who have a different background and skill set. This makes balancing very very hard. So you will need mechanics which will prevent the gap between those players becoming to big. That could mean bonuses for bad players and subtle mechanics to hold “too good” players back. But this could also be very dangerous. . Addiction is the key to keep players playing (and paying). There are several approaches to this . People want to feel needed, if there is nothing to do, they will stop playing | People need to feel, that they want to check on the state of the game. Is someone attacking me? Is my building ready? | Community! It is easy to give up a game – but it is hard to give up friends. Even if you met them online. | Know what is going on in your “area” (Activity stream) | . | . Secret souce for location based game’s feature … . … learning from Shadow Cities. Shadow Cities is a game from a Norwegian company. The speaker didn’t gave any numbers on their players, but told us, their game is played in over 40 countries (numbers would have been real nice). . Location based doesn’t (exclusively) mean that you play on a real map where you are. Every game which handles real life locations could be seen as location based. . The speaker talked about eight key “ingredients”, when it comes to location based games. . The critical mass challenge If no one is playing in your city, you will feel alone, and will stop playing. Deal with it! In Shadow Cities, you can teleport to your friends. | . | The sense of location | The open world vs. curated experience Thus you have such a big world, you can easily feel lonley (critical mass), but it also can get cluttered very fast. | . | Stationary vs. movement Most of the people play their game from home and work (76%) | . | Playing with neighbors Strong emotions | . | Geodata Where do you get your data from? Openstreetmap is a good choice, but isn’t 100% reliable. Before you begin planning such a game, you need to have a look at the data, if it is even possible. | . | Infrastructure: Battery, positioning and latency GPS is battery sucking bitch! | . | The brite social graph Again it comes down to balancing. In location based games, it is even harder, because you could achieve a balanced distribution of power in a country, but does this make your city or neighborhood also balanced? | . | . Post Mortem: Developing a city builing game … . … thats ready for quick content iteration. That speak was a … yeah … SHIT! The outline for this talk seemed really interesting, but most of the topics were only touched slightly or never mentioned. In addition I often did not understand the speaker. . So here is what I could take from this talk . Lot of iterations | Minimize the gap between what the user wants, and what you provide | Parallelize planing &amp; design | In order to scale design, the company shares all design documents with all the designers. Even back to 2005. Every design decision could be understood | . | . The Voodoo art of dynamic WebGL . Awesome talk, awesome dude (another guy who participated in making Lemmings :)). But I think I went over my head, when I went into this talk - since my knowledge of WebGL is very limited. Besides some IE9 bashing (using Chrome Frame is the only solution - every thing else isn’t worth it) here a short list what I took away from this talk. . Your GPU is powerful - let it have it. All the time. You are doing something wrong (or you have so less to render :)), when the GPU has nothing to do. Use batches of commands | . | Sprites (ok, nothing new) When you make your sprites/texture pages, sort the pictures per size. | Big pictures first, starting in the upper left corner. | Add borders/padding to pictures to avoid unexpected behavior, when you scale an image. | . | . Of course there was way more in this talk. Waiting for the slides :P . Love engine postmortem: . Lean and mean C engine design. The guy who held this talk, kinda surprised me. He sees things very differently than most of us. The talk wasn’t only about his engine - it was also about how you should develop things. There are a few quotes/things i want to share with you. . Great code is not written, it is rewritten | C++ should be named ++C if it really was any better than C | API is the key to collaboration | Code which makes fun to write should be written again, Code which doesn’t make fun to write, should be written in a way it is reusable | Engine decisions affects the game design | Technology unlocks creativity. | Engines should be throw aways Developing an engine is inexpensive (A couple of engine engineers vs. hundreds of artists) | . | . Cheaters, hackers, script kiddies … . … the dark side of online games. The talk started interesting, but as the speaker started talking about SQL injections, I left and decided to have a look at the dom of cologne :) .",
            "url": "https://seasick.github.io/seasickgames.com/games/2012/08/15/European-GDC-2012-Day-2.html",
            "relUrl": "/games/2012/08/15/European-GDC-2012-Day-2.html",
            "date": " • Aug 15, 2012"
        }
        
    
  
    
        ,"post7": {
            "title": "European GDC 2012 - Day 1",
            "content": "13Aug/12Off . European GDC 2012 – Day 1 . First day on the conference. Main language is English - even some of the hosts volunteers only speak English. Not a problem - just mentioning it. Of course all talks are held in English. . So what did I listen totoday? . $100,000 Whales … . … and introduction to Chinese browser game design. The guy who held the talk, is a former gold farmer who decided to go into the Chinese browser game market. In China there is a very competitive market around browser games. Every day, there are dozens of new browser games. The only way to get into this market, is to use a existing publisher which already have a big enough user base to monetize your investment. The downside of this … they take up to 90% of the revenue. But 90% of $ 24,000,000 is still pretty much money! Per month! Another downside of publishing browser games in China with a existing publisher is, that you need to revenue your investment in two weeks. Chinese browser games are very fast living. . But how do they make so much money in such a short time? Not only the market is very very competitive, also the players are. Whilst western players have a little problem with “Pay To Win”, the Chinese players don’t. Players will buy gear to progress within the game, instead of progressing within the game to get gear. The better the things are you can buy, the more they cost. As an example: A pet in Tier 1 costs $5, Tier 2 $20, Tier 3 $125 … and this goes up to Tier 10! So it isn’t a big surprise (ok, it was for me :) ) that there are players (the so called “Whales”) which pay $100,000 and more to be the best player on their server. Ranking is all to them. Every Chinese browser game has a extensive ranking. Not only who has the best gear - the list goes from “How many kills did someone have” to “How often did you pause to take a piss” ^^ . Fun fact aside: It is possible to buy a “Bot”, which will kill and farm while you are asleep. This bot is fully integrated into the browser game. So the users won’t download a suspicious script, the will use the integrated bot, and will pay money for it :) . 5 Things about American Online Gamers … . … that will surprise european developers. The guy who held the talk, had nearly 25 years of experience in this industry. Cool guy, you can read more about him on his Wikipedia article. . The attention span is very very low. So you have to hold the audience attention for the first minutes, to get the into your game. | Reading level is very low in the USA (he excluded Canada explicit), thus you need to show instead of tell (as less text as possible) | Players are celebrities and want to be unique. | Recognize that we are in the queue, user is the master. | History won’t sell … Americans only know, that after the dark ages we got cars and plains, and that there were many wars in the last century. | . Small Teams, Big Problems … . … How to produce sustainable agile development for growing teams. The talk began later because of technical difficulties, so the speaker had to speed up the talk. Bad ass accent, fast but monotone voice. Sadly nothing surprisingly new. At that time I thought it would have been better if I watched the CryTek “My First Game with the CryEngine Free”. But I wanted to go to see the … . Core Games, Real Numbers … . … Comparative stats for MMOs &amp; Social games. I’m sure this talk was awesome … I didn’t see it …. To see this one, I would have needed another kind of ticket - which would cost 200 € more. So I decided to make a break, have a look at the bookstore, and wander through the “Expo Floor”. . Free-to-Play game design is f*#!1ng awesome! . Very cool talk from the guys at Bigpoint! I hope I get the slides in time, because I don’t remember everything - long day, and my scumbag brain lets me down. . One of the main takeaways for me from this talk, is that this business model will only work for a small portion of games. A $50M CoD could never revenue via F2P. He should us a formula - it was kinda like this: . Cost for acquiring user &lt; Conversion * ARPPU * Lifetime * Virality (ARPPU = Average Revenue Per Paying User) . If you can manage to beat this magical line, you can buy your users and make money :) Otherwise your model doesn’t work, and you need to tweak one or more parameters. . The wonderful world of UX . How can we make games that resonate better and learn form approaches to music. Also a cool guy, works as producer for Ubisoft Singapore - studied music. What is UX? UX means “user experience”. And this isn’t the user interface only. It’s about what information is presented in which way. How can the user interact with the information, and what do you want the user to feel? He compared the parts of an user experience with members of a band. As example he also compared UX with Jazz and Blues. A “Jazz UX” is very complex, not easy to understand, but can be very powerful. It may may even require some more knowledge. Strategy games and simulations are often “Jazz powered games”. Blues on the other hand is kept very simple, and clear. . Jazz: Gran Turismo; Blues: Some arcade racing game, I forgot the name of :) . You definitely need to see the sheets. . Applying retro techniques to HTML5 development . Also a talk from a very expirienced developer. This guy helped making “Lemmings”! So awesome :) . The talk itself covered the following: . Avoid loops … you don’t say? | Images sprites … yes we know them | Scrolling. Browsers are not very good at rendering and composing at the same time. So you need to render your stuff on a “shadow area”, and transfer them back to your “main area”. | Audio sprites. Not entirely new, but still something I didn’t thought of | Floating point vs. fixed point. Isn’t a problem on desktop machines, but it is on other devices. Smartphones, tablets and what not aren’t that powerful as desktop CPUs. | . CryTek GDC Night . I sat till now to write this post, and now I will get dressed, and head over to this party :) .",
            "url": "https://seasick.github.io/seasickgames.com/games/2012/08/13/European-GDC-2012-Day-1.html",
            "relUrl": "/games/2012/08/13/European-GDC-2012-Day-1.html",
            "date": " • Aug 13, 2012"
        }
        
    
  
    
        ,"post8": {
            "title": "European Game Developer Conference",
            "content": "So I asked my employer if the company would pay for the trip to the European Game Developer Conference in Cologne . And he said yes - awesome! . I already arrived today, otherwise I would have missed the first sessions. The flight was fast, the airport a little bit confusing. I endlessly walked around the whole airport to find the train station . The conference centre is only two stations away from the hotel. So it won’t take too long for me to get there tomorrow. The hotel isn’t the Ritz, but it is clean - I’m in the “Paris” room :) . Enough chit chat … let us have a look at my agenda for tomorrow: . 9:30 $100,000 Whales - An Introduction to Chinese Browser Game Design | Operating a Game Site at Scale | . | 11:00 5 Things About American Online Gamers that Surprise European Developers | User-Generated Content In MMOs - From Champions Online To Neverwinter | Passion For Entertainment: 10 years of Battlefield/ 20 years of DICE | . | 13:00 . A Developer’s Guide to Surviving the Zombie (Freemium) Apocalypse | My First Game with the CryENGINE Free (Presented by Crytek GmbH) | Small Teams, Big Problems - How to Produce Sustainable Agile Development for Growing Teams | . | 13:35 . Core Games, Real Numbers: Comparative Stats for MMOs &amp; Social Games | Dead Island: How to Create a Mega Seller on a Moderate Budget | . | 14:30 . Free-to-Play Game Design is f*#!1ng Awesome | . | 16:00 . How Draw Something Absorbed 50 Million New Users, in 50 Days, with Zero Downtime . | The Wonderful World of UX: How We Can Make Games that Resonate Better and Learn from Approac… . | . | 17:30 . Applying Retro Techniques to HTML5 Development . | Seven Silver Bullets in Production and Operation of Free-2-Play Browser Games . | . | . As you can see, there is much more tracks I would like to listen to - sadly I cannot fork or clone myself :/ Luckily, it seems the host is recording the tracks. But I’m not sure, if the recordings are covered by my access pass. . After this brain challenging day, there will be the “Crytek GDC Night” :) Looking forward to it … .",
            "url": "https://seasick.github.io/seasickgames.com/games/2012/08/12/European-Game-Developer-Conference.html",
            "relUrl": "/games/2012/08/12/European-Game-Developer-Conference.html",
            "date": " • Aug 12, 2012"
        }
        
    
  
    
        ,"post9": {
            "title": "The small post in between",
            "content": "Since I don’t take the time to make progress, I decided to post . Reading RFC made easy … . Reading a RFC has always been a pain in the ass. No pain no more - today I discovered PrettyRFC! This little tool reformats the boring plain text RFC documents into rich text documents featuring a index of contents and linking between different RFCs. Above of it all you won’t hurt your eyes reading it. . Love2d 0.8 released . It’s a little bit late to blog about it, but better late than never. A new release of love2d 0.8 (name Rubber Piggy) was released on April the 8th. The biggest change: They added shaders! The new release also features the latest version of Box2D, a physics engine for games - but this also breaks some stuff, because Box2D had vast API changes. You can read all about this and other changes in the release notes. .",
            "url": "https://seasick.github.io/seasickgames.com/github/2012/05/20/The-small-post-inbetween.html",
            "relUrl": "/github/2012/05/20/The-small-post-inbetween.html",
            "date": " • May 20, 2012"
        }
        
    
  
    
        ,"post10": {
            "title": "Full encrypted hard drive with Ubuntu 12.04",
            "content": "Last week we got new notebooks at work. With being more mobile, there is also the risk that your precious data will be stolen with your notebook. So there is definitely the need for a encrypted hard drive! . When you are installing Ubuntu, you have the possibility to encrypt (only) your home directory. If you do not bother having the rest of your system not encrypted, you can stop here. . For a full encrypted system you will need to get the alternate installer. This isn’t as shiny as the “normal” installer (on which Canonical and the community did a great job), but I’ve the feeling that the alternate installer is much faster. But more important, this is needed to configure your partitions to be encrypted. . Short summary of the steps you will need to do: . Boot into the alternate installer | Get through the process until you get to the point where you have to choose how you want to partition your drives | Choose manual partitioning | Create a boot partition (doesn’t need to be bigger than 256MB - mount on /boot) | Create a physical volume for encryption (its like creating a partition). | Configure the encrypted device you just created. This includes choosing a pass phrase which you will need to enter everytime you start your system. Don’t spare at length or complexity of your password! | Now you will need to configure the encrypted volume to be used as “physical volume for LVM” (Logical Volume Manager) | Create a volume group within the LVM | Now you can easily create partitions for root, home and (if you need to) swap | Continue with installation :) | This video helped me a lot understanding the different steps. . The only thing that bothers me is a little bug: The prompt for inputing the pass phrase does not show up when using the quiet splash. But it is there - so you can still type in your pass phrase. You can also choose to deactivate the quiet splash :) .",
            "url": "https://seasick.github.io/seasickgames.com/ubuntu/2012/05/01/Full-encrypted-hard-drive.html",
            "relUrl": "/ubuntu/2012/05/01/Full-encrypted-hard-drive.html",
            "date": " • May 1, 2012"
        }
        
    
  
    
        ,"post11": {
            "title": "Github fastlane",
            "content": "Work related I have to get my head a little bit deeper into Git and GitHub. So I’ve been reading a few articles, and I’m pretty sure I will read more of them :) . On of the things I stumbled upon is this awesome image, which describes a possible workflow when you want to contribute to an other project on GitHub. You will find most of the things you need to know on this image! . Also a very helpful is the help of GitHub itself, which is hosted as git project itself. .",
            "url": "https://seasick.github.io/seasickgames.com/github/2012/02/15/Github-fastlane.html",
            "relUrl": "/github/2012/02/15/Github-fastlane.html",
            "date": " • Feb 15, 2012"
        }
        
    
  
    
        ,"post12": {
            "title": "Long time no see",
            "content": "Sadly I wasn’t able to work on my stuff lately. Instead of figuring out how to move those brain thirsty zombies around, I was playing around with node.js (more on that another time). . I was thinking about writing something here, but what would it look like, if I came with empty hands? So I decided to push my first zombie game onto GitHub. I even found a name for the project … “Zombie Zero”. Now I am thinking about working again on those zombies. Maybe adding the possibility to save your highest score and even an cooperative multiplayer mode. I also thought about adding a kind of “calling home” feature. Not in a bad way! I just want to know about the users who are playing this game, to answer a few questions of mine: . How long do they play? | How often do they play? | What scores are they reaching? | Maybe even tracking the accuracy | . Tracking is kinda “a bad thing” … at least when you don’t know about being tracked. So that should be an option to enable or disable as one likes. .",
            "url": "https://seasick.github.io/seasickgames.com/github/love2d/lua/zombie/2012/02/04/Long-time-no-see.html",
            "relUrl": "/github/love2d/lua/zombie/2012/02/04/Long-time-no-see.html",
            "date": " • Feb 4, 2012"
        }
        
    
  
    
        ,"post13": {
            "title": "Zombie Rage - current state",
            "content": "I made a short video of the current state the project I’m working on. . Sorry, video got lost in blog migration . As you can see, it is not much, but its something :) The menu is working - even with settings, where you can change the window size. There is also an intro, but I was a little bit lazy to put this into the video also (it is just text - so you haven’t missed anything). The zombies are walking in my direction, and as you can see, I used the sprites mentioned in my previous post “I found my zombies”). . The next part (which I tried to avoid in the video) is integrating a neat path finding algorithm. The first thing I stumbled upon was the [“A” algorithm](https://en.wikipedia.org/wiki/A_search_algorithm “A* Search Algorithm”). At the moment I’m not sure how I can get this into my code without having the frames per second dropping below 25 … but as always - there is a solution out there :) .",
            "url": "https://seasick.github.io/seasickgames.com/zombie/2012/01/17/Zombie-rage.html",
            "relUrl": "/zombie/2012/01/17/Zombie-rage.html",
            "date": " • Jan 17, 2012"
        }
        
    
  
    
        ,"post14": {
            "title": "I found my zombies",
            "content": "The game on which I’m currently working involves zombies. In my last game, the zombies were only represented by boring circles. So I’m eager to change this - but my graphical skills are limited to a few things I learned decades ago. . Luckily there are many sources on the net, were you can get stuff for your projects. I’ve found a spritesheet for my zombies on OpenGameArt.org. I will use those for my current project - braaaaains :) . If you are searching for free stuff like those, you will find many different pages. There are a few good, but most of them are outdated and nearly dead. Have a look at a few sites I’ve been looking at: . OpenGameArt.org | CgTextures | Lost Garden (very nice blog, includes some free art) | OpenFontLibrary | Pixel Prospector (a blog all about indie gaming - they have huge lists about everything) | .",
            "url": "https://seasick.github.io/seasickgames.com/gameart/resources/textures/zombie/2012/01/15/I-found-my-zombies.html",
            "relUrl": "/gameart/resources/textures/zombie/2012/01/15/I-found-my-zombies.html",
            "date": " • Jan 15, 2012"
        }
        
    
  
    
        ,"post15": {
            "title": "The first zombies",
            "content": "Did I mention, that I love zombies?! So the first game I wrote was a “kill zombies or be killed” game. Could it be, that 83 percent of all first games have zombies within? It had no textures (not counting the blood splatters I used in the menu) and no sound. The “ground” was light grey, the zombies dark grey, the player white and the bullets were yellow. . Drawing some circles onto the screen - yeah, what a challenge … It got interesting when it came down to calculations on how the zombies should move. Probably any middle school kid would had laughed at me. But having to remember Pythagoras and his guys was serious business. But I managed to get along and get the zombies moving :) . My next challenge was collision detection. Without detection collisions the zombies wouldn’t be able to catch me, neither would i be able to shoot them. In addition, the zombies would stack over each other. So whenever a zombie or any other entity changes its position, you need to check against every other existing entity if their outlines are overlaping. This easy aproach has also its disadvantages - the more entities you have, the slower it gets. There are ways to get around that - but more on that an other time. . To sum it up for you: . Kill zombies | Every round they are getting faster | Did I mention bullet time? | . Check out the source code here. .",
            "url": "https://seasick.github.io/seasickgames.com/love2d/lua/zombie/2012/01/12/The-first-zombies.html",
            "relUrl": "/love2d/lua/zombie/2012/01/12/The-first-zombies.html",
            "date": " • Jan 12, 2012"
        }
        
    
  
    
        ,"post16": {
            "title": "(Me) Getting started",
            "content": "Making games was always a dream for me. A desire for which I was to lazy to make it real. First thought - Me making the next generation FPS - or even better - I’m making an MMORPG like World of Warcraft. After some thinking and reading, more thinking and more reading I realized that I have to establish knowledge and experience. . But how do I got started? . Location, loca … erm … Information, Information, Information. I kept googling many nights on different topics, made my way through different indie blogs, got distracted for hours at 9gag . I read about Game patterns, searched for inspiration on deviantart and googled for free art - and by free I mean like “Creative Common”-free (there’s plenty of good stuff out there). But mostly I was searching for an engine with which I could try out some things. And there are also an ass full of game engines/frameworks out there. Some for money, some for free. . Of course - if I’m making a game it has to be three dimensional! So the first engine with which I played around was “Ogre3D”. That meant I had to refresh my C++ skills. After playing around for a few days I had to admit that neither my coding skills, my ass kicking 3d modeling skills or the understanding of what I’m getting into was at an satisfying level. So I dropped the whole idea of making a 3D game, and stopped thinking about it. . Many months later I found myself again browsing some engines and I decided to give a two dimensional engine a shot. The engine which got my attention was “Löve2d”. Taken from the website - “This is an awesome framework you can use to make 2D games in Lua. It’s free, open-source, and works on Windows, Mac OS X and Linux”. I played around with it and with the language - a lot of fun I even ordered two books for Lua, which I was reading before going to bed ^^ . Since I love zombies, I decided to do something in that direction. . I will post the game with my next post - don’t expect too much .",
            "url": "https://seasick.github.io/seasickgames.com/love2d/lua/zombie/2012/01/11/Me-Getting-Started.html",
            "relUrl": "/love2d/lua/zombie/2012/01/11/Me-Getting-Started.html",
            "date": " • Jan 11, 2012"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://seasick.github.io/seasickgames.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}